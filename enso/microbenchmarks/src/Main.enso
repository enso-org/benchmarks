from Standard.Base import all

import Standard.Test.Bench

polyglot java import java.lang.Thread

print_header =
    IO.println "language, benchmark, run_id, time"

# This modifies the standard measure function to print in CSV format
measure = ~act -> label -> num_iters ->
    iteration = it_num ->
        act_it_num = num_iters - it_num
        x1 = System.nano_time
        Runtime.no_inline act
        x2 = System.nano_time
        res = (x2 - x1) / 1000000
        IO.println "enso, "+label+", "+act_it_num.to_text+", "+res.to_text
    num_iters.times iteration

sum : Integer -> Integer
sum n =
    go acc i =
        if i > n then acc else
            @Tail_Call go acc+i i+1
    go 0 1

alloc_vector : Integer -> Vector
alloc_vector n =
    Vector.new n (x -> x)

sum_vector : Vector -> Integer
sum_vector vec =
    go acc i =
        if i >= vec.length then acc else
            @Tail_Call go (acc + vec.at i) i+1
    go 0 0

type List
    type Cons head tail
    type Nil

alloc_list : Integer -> List
alloc_list n =
    go acc n =
        if n == 0 then Cons 0 acc else
            @Tail_Call go (Cons n acc) n-1
    go Nil n

sum_list : List -> Integer
sum_list list =
    go acc list = case list of
        Nil -> acc
        Cons h t ->
            @Tail_Call go acc+h t
    go 0 list

type Tree
    type Leaf
    type Node left elem right

alloc_full_tree : Integer -> Tree
alloc_full_tree depth =
    go ix d =
        if d == 0 then [ix, Leaf] else
            resL = go ix d-1
            v = resL.first
            resR = go resL.first+1 d-1
            [resR.first, Node resL.second v resR.second]
    res = go 0 depth
    res.second

sum_tree : Tree -> Integer
sum_tree tree = case tree of
    Leaf -> 0
    Node l e r -> here.sum_tree l + e + here.sum_tree r

main =
    here.print_header
    # size = 100000000
    # depth = 25
    # n_iters = 10
    size = 100 # TODO FIXME temporary workaround to quickly test
    depth = 4
    n_iters = 2

    here.measure (Thread.sleep 100) "100ms" 10

    here.measure (here.sum size) "sum" n_iters

    here.measure (here.alloc_vector size) "alloc_vector" n_iters
    vec = here.alloc_vector size
    here.measure (here.sum_vector vec) "sum_vector" n_iters

    here.measure (here.alloc_list size) "alloc_list" n_iters
    list = here.alloc_list size
    here.measure (here.sum_list list) "sum_list" n_iters

    here.measure (here.alloc_full_tree depth) "alloc_full_tree" n_iters
    tree = here.alloc_full_tree depth
    here.measure (here.sum_tree tree) "sum_tree" n_iters
