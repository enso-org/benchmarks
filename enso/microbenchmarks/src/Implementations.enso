from Standard.Base import all

sum : Integer -> Integer
sum n =
    go acc i =
        if i > n then acc else
            @Tail_Call go acc+i i+1
    res = go 0 1
    res

type Point x y

alloc_vector : Integer -> Vector
alloc_vector n =
    Vector.new n (x -> Point x x)

sum_vector : Vector -> Integer
sum_vector vec =
    go acc i =
        if i >= vec.length then acc else
            v = vec.at i
            @Tail_Call go (acc + v.x + v.y) i+1
    res = go 0 0
    res

type List
    type Cons head tail
    type Nil

alloc_list : Integer -> List
alloc_list n =
    go acc n =
        if n == 0 then Cons (Point 0 0) acc else
            @Tail_Call go (Cons (Point n n) acc) n-1
    res = go Nil n
    res

sum_list : List -> Integer
sum_list list =
    go acc list = case list of
        Nil -> acc
        Cons h t ->
            @Tail_Call go acc+h.x+h.y t
    res = go 0 list
    res

type Tree
    type Leaf
    type Node left elem right

alloc_full_tree : Integer -> Tree
alloc_full_tree depth =
    go remaining_depth =
        if remaining_depth == 0 then Leaf else
            l = go remaining_depth-1
            i = State.get Integer
            State.put Integer i+1
            e = Point i i
            r = go remaining_depth-1
            Node l e r
    res = State.run Integer 0 <| go depth
    res

sum_tree : Tree -> Integer
sum_tree tree = case tree of
    Leaf -> 0
    Node l e r -> here.sum_tree l + e.x + e.y + here.sum_tree r

ten_million = 10000000
million = 1000000
tree_depth = 17
